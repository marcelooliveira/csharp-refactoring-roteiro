C# - Refactorings Parte I: Composing methods, Moving Features between Objects:  
 - Extract Method, 
 - Inline Method, 
 - Extract Variable, 
 - Inline Temp, 
 - Replace Temp with Query, 
 - Split Temporary Variable, 
 - Remove Assignments to Parameters, 
 - Replace Method with Method Object, 
 - Substitute Algorithm, Move Method, 
 - Move Field, 
 - Extract Class, 
 - Inline Class, 
 - Hide Delegate, 
 - Remove Middle Man, 
 - Introduce Foreign Method, 
 - Introduce Local Extension

C# Refactorings Parte II: Organizing Data, Simplifying Conditional Expressions: 
 - Self Encapsulate Field, 
 - Replace Data Value with Object, 
 - Change Value to Reference, 
 - Change Reference to Value, 
 - Replace Array with Object, 
 - Duplicate Observed Data, 
 - Change Unidirectional Association to Bidirectional, 
 - Change Bidirectional Association to Unidirectional, 
 - Replace Magic Number with Symbolic Constant, 
 - Encapsulate Field, Encapsulate Collection, 
 - Replace Type Code with Class, 
 - Replace Type Code with Subclasses, 
 - Replace Type Code with State/Strategy, 
 - Replace Subclass with Fields, 
 - Decompose Conditional, 
 - Consolidate Conditional Expression, 
 - Consolidate Duplicate Conditional Fragments, 
 - Remove Control Flag, 
 - Replace Nested Conditional with Guard Clauses, 
 - Replace Conditional with Polymorphism, 
 - Introduce Null Object, 
 - Introduce Assertion

C# Refactorings Parte III: Simplifying Method Calls, Dealing with Generalisation: 
 - Rename Method
 - Add Parameter, 
 - Remove Parameter, 
 - Separate Query from Modifier, 
 - Parameterize Method, 
 - Replace Parameter with Explicit Methods, 
 - Preserve Whole Object, 
 - Replace Parameter with Method Call, 
 - Introduce Parameter Object, 
 - Remove Setting Method, 
 - Hide Method, 
 - Replace Constructor with Factory Method, 
 - Replace Error Code with Exception, 
 - Replace Exception with Test, 
 - Pull Up Field, 
 - Pull Up Method, 
 - Pull Up Constructor Body, 
 - Push Down Method, 
 - Push Down Field, 
 - Extract Subclass, 
 - Extract Superclass, 
 - Extract Interface, 
 - Collapse Hierarchy,
 - Form Template Method, 
 - Replace Inheritance with Delegation, 
 - Replace Delegation with Inheritance
